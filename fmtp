#!/usr/bin/env sh
# fmt(1) wrapper script for prefixed text
# useful for comments (e.g., "//" prefix) and quotations (">" prefix)

width=80
if [ $# -ge 1 ]; then
	op=$(echo $1 | awk '{ s=substr($0,1,2); print s; }')
	if [ "$op" = "-w" ]; then
		if [ "$1" = "-w" ]; then
			# space between -w and number
			shift
			if [ $# -eq 0 ]; then
				echo "$0: -w requires an argument" 1>&2
				exit 1
			fi
			width="$1"
			shift
		else
			# no space between -w and number
			width=$(echo $1 | awk '{ s=substr($0,3); print s; }')
			shift
		fi
	fi
fi

if [ $# -ne 0 ]; then
	echo "$0: unexpected arguments: $@" 1>&2
	exit 1
fi

# create a temporary file which is deleted on exit
tmpf=$(mktemp)
trap 'rm -f -- "$tmpf"' EXIT

# dump stdin to the temporary file
cat > "$tmpf"

# first token on first line is taken as the prefix
prefix=`sed 1q "$tmpf" | awk '{ print $1 }'`

# Doxygen comments are "///" and batch file comments are "rem",
# so allow prefixes <= 3 bytes; longer prefixes could be allowed
# if there is a need.
if [ ${#prefix} -gt 3 ]; then
	echo "$0: prefix \"$prefix\" is longer than expected" 1>&2
	exit 1
fi

# plan9port's fmt(1) and sed(1) aren't compatible with this script; if plan9port
# is at the front of the path, use the full path to the standard utilities.
fmt=fmt
sed=sed
if [ ! -z "$PLAN9" ]; then
	case "$PATH" in
	$PLAN9/bin:*)
		fmt=/usr/bin/fmt
		sed=/usr/bin/sed
		;;
	*)
		;;
	esac
fi

$fmt --version 2>/dev/null | grep GNU >/dev/null
if [ $? -eq 0 ]; then
	# GNU coreutils fmt(1).  Unfortunately, when a line is indented with
	# tabs, GNU's fmt replaces spaces with tabs everywhere on the line:
	# e.g., two spaces after a period may become a tab.  Convert those tabs
	# back into spaces; then if (and only if) the line was indented with
	# tabs, convert the leading indentation back into tabs.
	ichar=`sed 1q "$tmpf" | $sed 's/\(.\).*/\1/'`
	postexpand=cat
	if [ "$ichar" = "	" ]; then
		postexpand="unexpand --first-only"
	fi
	$fmt --uniform-spacing --width=$width --goal=$width \
		--prefix="$prefix " <"$tmpf" | \
		expand | $postexpand
else
	# BSD fmt(1) has no --prefix, so the prefix must be removed
	# and re-added
	indent=`sed 1q "$tmpf" | $sed 's/\([ 	]*\).*/\1/'`
	indentsp=`echo "$indent" | expand`
	newwidth=`expr $width - ${#prefix} - ${#indentsp}`
	if [ $newwidth -lt 0 ]; then
		echo "$0: combined indent and prefix too long for goal width ($width)" 1>&2
		echo "$0: indent.len=${#indentsp} prefix=\"$prefix\" prefix.len=${#prefix}" 1>&2
		exit 1
	fi
	cat "$tmpf" | \
		$sed "s@^$indent$prefix\( *\)@\1@" | \
		$fmt -s -w$newwidth | \
		$sed "s@^.@$indent$prefix @" | \
		$sed "s@^\$@$indent$prefix@"
fi
