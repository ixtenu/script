#!/usr/bin/env sh
# fmt(1) wrapper script for prefixed text
# useful for comments (e.g., "//" prefix) and quotations (">" prefix)

usage() {
	echo "usage: $0 [-w width]" 1>&$1
	echo "Wrap prefixed text at given column width (default 80)." 1>&$1
	exit $(($1 - 1))
}

width=80
while getopts hw: name; do
	case $name in
	w) width=$OPTARG;;
	h) usage 1;;
	?) usage 2;;
	esac
done
shift $(($OPTIND - 1))

if [ $# -ne 0 ]; then
	echo "$0: unexpected arguments: $@" 1>&2
	usage 2
fi

# create a temporary file which is deleted on exit
tmpf=$(mktemp)
trap 'rm -f -- "$tmpf"' EXIT

# dump stdin to the temporary file
cat >"$tmpf"

# first token on first line is taken as the prefix
prefix=`sed 1q "$tmpf" | awk '{ print $1 }'`

# Doxygen comments are "///" and batch file comments are "rem",
# so allow prefixes <= 3 bytes; longer prefixes could be allowed
# if there is a need.
if [ ${#prefix} -gt 3 ]; then
	echo "$0: prefix \"$prefix\" is longer than expected" 1>&2
	exit 1
fi

# plan9port's fmt(1) and sed(1) aren't compatible with this script, so don't
# use them even if $PLAN9/bin is at the front of the path
fmt=$(no9 which fmt)
sed=$(no9 which sed)

$fmt --version 2>/dev/null | grep GNU >/dev/null
if [ $? -eq 0 ]; then
	# GNU coreutils fmt(1).  Unfortunately, when a line is indented with
	# tabs, GNU's fmt replaces spaces with tabs everywhere on the line:
	# e.g., two spaces after a period may become a tab.  Convert those tabs
	# back into spaces; then if (and only if) the line was indented with
	# tabs, convert the leading indentation back into tabs.
	ichar=`sed 1q "$tmpf" | $sed 's/\(.\).*/\1/'`
	postexpand=cat
	if [ "$ichar" = "	" ]; then
		postexpand="unexpand --first-only"
	fi
	$fmt --uniform-spacing --width=$width --goal=$width \
		--prefix="$prefix " <"$tmpf" | \
		expand | $postexpand
else
	# BSD fmt(1) has no --prefix, so the prefix must be removed
	# and re-added
	indent=`sed 1q "$tmpf" | $sed 's/\([ 	]*\).*/\1/'`
	indentsp=`echo "$indent" | expand`
	newwidth=`expr $width - ${#prefix} - ${#indentsp}`
	if [ $newwidth -lt 0 ]; then
		echo "$0: combined indent and prefix too long for goal width ($width)" 1>&2
		echo "$0: indent.len=${#indentsp} prefix=\"$prefix\" prefix.len=${#prefix}" 1>&2
		exit 1
	fi
	cat "$tmpf" | \
		$sed "s@^$indent$prefix\( *\)@\1@" | \
		$fmt -s -w$newwidth | \
		$sed "s@^.@$indent$prefix @" | \
		$sed "s@^\$@$indent$prefix@"
fi
