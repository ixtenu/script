#!/usr/bin/env sh
# fmt(1) wrapper script
set -u

# dash doesn't (yet) support pipefail
if [ "$(uname)" = "Linux" -a "$(readlink -f $(which sh))" != "/usr/bin/dash" ]; then
	set -o pipefail
fi

usage() {
	echo "usage: $0 [-w width]" 1>&$1
	echo "Wrap text at given column width (default 80)." 1>&$1
	exit $(($1 - 1))
}

width=80
while getopts w:h name; do
	case $name in
	w) width=$OPTARG;;
	h) usage 1;;
	?) usage 2;;
	esac
done
shift $(($OPTIND - 1))

if [ $# -ne 0 ]; then
	echo "$0: unexpected arguments: $@" 1>&2
	usage 2
fi

# plan9port's fmt(1) and sed(1) aren't compatible with this script, so don't
# use them even if $PLAN9/bin is at the front of the path
fmt=$(no9 which fmt)
sed=$(no9 which sed)

$fmt --version 2>/dev/null | grep GNU >/dev/null
if [ $? -eq 0 ]; then
	# GNU coreutils fmt(1).  Unfortunately, when a line is indented with
	# tabs, GNU's fmt replaces spaces with tabs everywhere on the line:
	# e.g., two spaces after a period may become a tab.  Convert those tabs
	# back into spaces; then if (and only if) the line was indented with
	# tabs, convert the leading indentation back into tabs.
	tmpf=$(mktemp)
	trap 'rm -f -- "$tmpf"' EXIT
	cat >"$tmpf"
	ichar=$(sed 1q "$tmpf" | $sed 's/\(.\).*/\1/')
	if [ $? -ne 0 ]; then
		ev=$?
		echo "$0: error reading first character of $tmpf, stopping" 2>&1
		exit $ev
	fi
	postexpand=cat
	if [ "$ichar" = "	" ]; then
		postexpand="unexpand --first-only"
	fi
	$fmt --uniform-spacing --width=$width --goal=$width <"$tmpf" | \
		expand | $postexpand
else
	# BSD fmt(1)
	$fmt -s -w$width
fi
