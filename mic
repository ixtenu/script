#!/usr/bin/env sh
# Microphone control abstraction.  Supported backends:
# - pamixer (PulseAudio)
# - amixer (PulseAudio; untested)
# - mixer (FreeBSD; untested)
set -eu

usage() {
	echo "usage: $0 [boolean]" 1>&$1
	echo "Turn microphone on or off." 1>&$1
	echo "If boolean is omitted, toggle." 1>&$1
	exit $(($1 - 1))
}

is_true() {
	v="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
	case "$v" in
	"on"|"true"|"t"|"y"|"yes"|"1") return 0;;
	*) return 1;;
	esac
}

is_false() {
	v="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
	case "$v" in
	"off"|"false"|"f"|"n"|"no"|"0"|"nil") return 0;;
	*) return 1;;
	esac
}

is_bool() {
	is_true $1 || is_false $1
}

is_cmd() {
	command -v "$1" >/dev/null 2>&1
}

if [ $# -gt 1 ]; then
	usage 2;
elif [ $# -eq 0 ] || [ "$1" = "toggle" ]; then
	if is_cmd pamixer; then
		pamixer --default-source -t
	elif is_cmd amixer; then
		amixer -q set Capture toggle
	elif is_cmd mixer; then
		mixer mic.mute=^
	else
		echo "$0: don't know how to toggle microphone on this system" 1>&2
		exit 1
	fi
elif is_true "$1"; then
	if is_cmd pamixer; then
		pamixer --default-source -u
	elif is_cmd amixer; then
		amixer -q set Capture cap
	elif is_cmd mixer; then
		mixer mic.mute=0
	else
		echo "$0: don't know how to enable microphone on this system" 1>&2
		exit 1
	fi
elif is_false "$1"; then
	if is_cmd pamixer; then
		pamixer --default-source -m
	elif is_cmd amixer; then
		amixer -q set Capture nocap
	elif is_cmd mixer; then
		mixer mic.mute=1
	else
		echo "$0: don't know how to disable microphone on this system" 1>&2
		exit 1
	fi
else
	echo "$0: don't know how to interpret \"$1\" as a boolean"
	exit 1
fi
