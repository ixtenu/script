#!/usr/bin/env sh
# unexpand(1) wrapper script
set -u

usage() {
	echo "usage: $0 [-t tab_stop] [file ...]" 1>&$1
	echo "Unexpand spaces to tabs assuming tab stops every tab_stop (default 4) columns." 1>&$1
	echo "If files are specified, unexpands tabs in them; otherwise reads from stdin and" 1>&$1
	echo "writes to stdout." 1>&$1
	exit $(($1 - 1))
}

tabw=4
while getopts t:h name; do
	case $name in
	t) tabw=$OPTARG;;
	h) usage 1;;
	?) usage 2;;
	esac
done
shift $(($OPTIND - 1))

# all unexpand(1) implementations except OpenBSD's support -t
targ="-t$tabw"
if [ "$(uname)" = "OpenBSD" ]; then
	if [ $tabw -ne 8 ]; then
		echo "$0: OpenBSD unexpand lacks -t option, must use -t8" 1>&2
		exit 1
	fi
	targ=""
fi

if [ $# -eq 0 ]; then
	exec unexpand $targ
fi

# create a temporary file which is deleted on exit
tmpf="$(mktemp)"
if [ $? -ne 0 ]; then
	exit $?
fi
trap 'rm -f -- "$tmpf"' EXIT

for f in "$@"; do
	unexpand $targ <"$f" >"$tmpf"
	if [ $? -ne 0 ]; then
		ev=$?
		echo "$0: error unexpanding $f into $tmpf, stopping" 2>&1
		exit $ev
	fi

	# skip rewriting the file if nothing changed
	if ! cmp "$tmpf" "$f" 2>&1 >/dev/null; then
		# using cat (even though it's not atomic) to rewrite the
		# file so that the original metadata (e.g., permissions) are
		# preserved
		cat "$tmpf" >"$f"
		if [ $? -ne 0 ]; then
			ev=$?
			echo "$0: error writing $tmpf into $f, stopping" 2>&1
			exit $ev
		fi
	fi
done
