#!/usr/bin/env sh
# fmt(1) wrapper with smarts for prefixed text and bulleted lists
set -u
command -v setpipefail >/dev/null && . "$(which setpipefail)"

# create a temporary file which is deleted on exit
tmpf="$(mktemp)"
[ $? -ne 0 ] && exit $?
trap 'rm -f -- "$tmpf"' EXIT

errchk() {
	ev=$?
	errmsg="$1"
	if [ $ev -ne 0 ]; then
		echo "$errmsg" 1>&2
		exit $ev
	fi
}

# dump stdin to the temporary file
cat >"$tmpf"
errchk "$0: error writing stdin into $tmpf, stopping"

line_count() { wc -l "$tmpf" | awk '{ print $1 }'; }

gettok() {
	line_num=$1
	tok_num=$2
	sed -n ${line_num}p "$tmpf" | awk "{ print \$$tok_num }"
	errchk "$0: error reading line $line_num of $tmpf, stopping"
}

# extract the first non-whitespace character on the first line
token="$(gettok 1 1)"

# does this look like a bulleted list?
for t in '-' '*' '+'; do
	if [ "$token" = "$t" ]; then
		fmtbl -b"$t" "$options" < "$tmpf"
		exit $?
	fi
done

options="$@"

# for prefixed text, format only until the prefix stops, and print anything
# afterward as-is; this behavior is convenient when stdin is a comment followed
# by code.
fmt_prefixed() {
	prefix="$1"
	[ $# -ge 2 ] && first_line=$2 || first_line=1
	last_line=$first_line
	while [ "$(gettok $((last_line+1)) 1)" = "$prefix" ]; do
		last_line=$((last_line+1))
	done
	set -e
	count=$(line_count)
	sed -n ${first_line},${last_line}p "$tmpf" | fmtp -p"$prefix" $options
	[ $last_line -lt $count ] && sed -n $((last_line+1)),${count}p "$tmpf"
	exit 0
}

# Special case for multi-line C comments with star decorators on each line, e.g.:
#
# /*
#  * Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed
#  * do eiusmod tempor incididunt ut labore et dolore magna aliqua.
#  */
if [ "$token" = "/*" ] && [ -z "$(gettok 1 2)" ]; then
	count="$(line_count)"
	if [ $count -ge 3 ]; then
		stars=0
		end=2
		itoken=''
		for i in $(seq $end $count); do
			end=$i
			itoken="$(gettok $i 1)"
			[ "$itoken" != "*" ] && break
			stars=$((stars+1))
		done
		if [ $stars -ge 1 ] && [ "$itoken" = "*/" ] && [ -z "$(gettok $end 2)" ]; then
			set -e
			sed -n 1p "$tmpf"
			fmt_prefixed '*' 2
		fi
	fi
fi

# does this look like a markdown quotation or a line comment?
tokenlc=$(echo "$token" | tr '[A-Z]' '[a-z]')
for t in '>' '//' '///' '#' '##' 'rem' '%' '!'; do
	[ "$tokenlc" = "$t" ] && fmt_prefixed "$token"
done

# "--" is trickier because it's a line comment in some programming languages
# (e.g., Lua, Haskell, Ada) but it's also used as an ASCII representation of
# an en dash (which might just happen to fall on the start of a line); treat
# it as a comment if and only if all non-blank lines start with it.
if [ "$token" = "--" ]; then
	all='yes'
	count="$(line_count)"
	for i in $(seq 2 $count); do
		itoken="$(gettok $i 1)"
		if [ -n "$itoken" ] && [ "$itoken" != "--" ]; then
			all='no'
			break
		fi
	done
	[ "$all" = "yes" ] && fmt_prefixed "--"
fi

# normal text
fmtw "$@" < "$tmpf"
